promise(async function command_line() {
	const readline = require('readline')
	const rl = readline.createInterface({
		input: process.stdin,
	})

	function ask() {
		rl.question('', result => {
			ask()
			do_action(result)
		})
	}
	ask()

	async function do_action(result) {
		result = result.trim()
		switch (+result) {
			// open in browser
			case 1: {
				open_in_browser()
				break
			}
			// 2 upload
			case 2: {
				let start = Date.now()

				yellow('Update live site.. ')

				no_git_status = true
				let old_on_bundle_done = on_bundle_done

				// prevent compiler from restarting the compiler
				await write('./norestart', '')

				// pre update
				cyan('Git Add/Commit Before Pull')
				await spawn({
					command: 'git add --all'.split(' '),
				})
				await spawn({
					command: 'git commit -m "Pre Update"'.split(' '),
				})
				cyan('Git Pull')
				await spawn({
					command: 'git pull server master'.split(' '),
				})
				await spawn({
					command: 'git pull origin master'.split(' '),
				})

				// tell npm to bump the project version
				cyan('Bump Version')
				await spawn({
					command: 'call npm version patch --no-git-tag-version'.split(' '),
					callback: noop,
				})
				// write the version so its usable on the frontend
				let version = JSON.parse(await read(project + 'package.json')).version
				blue('v' + version)

				on_bundle_done = async () => {
					on_bundle_done = old_on_bundle_done

					// write version to index
					cyan('Write Version To Index')
					let index = await read(project + options.folders.client + 'index.html')
					await write(
						project + options.folders.client + 'index.html',
						index
							.replace(/\.js\?[^"']+/g, '.js?' + version)
							.replace(/\.css\?[^"']+/g, '.css?' + version),
					)

					// track binary files
					cyan('Track Build Folder')
					await spawn({
						command: 'git update-index --no-skip-worktree client/dist/**'.split(' '),
					}) //.catch(noop)

					// commit add
					cyan('Git Add/Commit Before Pushing')
					await spawn({
						command: 'git add --all'.split(' '),
					})
					await spawn({
						command: ('git commit -m "' + version + '"').split(' '),
					})

					// untrack build
					cyan('Untrack Build Folder')
					await spawn({
						command: 'git update-index --skip-worktree client/dist/**'.split(' '),
					}) //.catch(noop)

					// commit all and push
					cyan('Git Pushing')
					await spawn({
						command: 'git push server master'.split(' '),
					})

					await remove('./norestart')

					no_git_status = false

					yellow('Site updated in ' + enlapsed(start) + ' seconds')
					console.log()
				}

				cyan('Waiting For Build')

				await write('./version.js', '// AUTOGENERATED\nglobalThis.version ="' + version + '"')

				break
			}
			default: {
				if (/^[0-9\s]+$/i.test(result)) {
					error('Unkown action ' + result)
				} else if (result.trim() !== '') {
					await spawn({
						command: 'git add --all'.split(' '),
					})
					await spawn({
						command: ['git', 'commit', '-m', '"' + result + '"'],
					})
					await spawn({
						command: 'git pull origin master'.split(' '),
					})
					await spawn({
						command: 'git push origin master'.split(' '),
					})
				}
			}
		}
	}
})
